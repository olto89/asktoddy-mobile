/**
 * DrawerNavigator - Side menu navigation matching AskToddy POC design
 */

import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
} from 'react-native';
import { createDrawerNavigator, DrawerContentScrollView, DrawerContentComponentProps } from '@react-navigation/drawer';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { useAuth } from '../contexts/AuthContext';
import designTokens from '../styles/designTokens';

// Screens
import ChatScreen from '../screens/ChatScreen';
import CameraScreen from '../screens/CameraScreen';
import ResultsScreen from '../screens/ResultsScreen';

const Drawer = createDrawerNavigator();

interface DrawerContentProps extends DrawerContentComponentProps {
  // Add any custom props here
}

function CustomDrawerContent({ navigation, state }: DrawerContentProps) {
  const { user, signOut } = useAuth();

  const menuItems = [
    {
      name: 'Chat',
      icon: 'chatbubble-outline',
      onPress: () => navigation.navigate('Chat'),
    },
    {
      name: 'Camera',
      icon: 'camera-outline',
      onPress: () => navigation.navigate('Camera'),
    },
    {
      name: 'Recent Projects',
      icon: 'folder-outline',
      onPress: () => {
        // TODO: Navigate to projects history
        console.log('Recent Projects - Coming Soon');
      },
    },
    {
      name: 'Settings',
      icon: 'settings-outline',
      onPress: () => {
        // TODO: Navigate to settings
        console.log('Settings - Coming Soon');
      },
    },
  ];

  const handleSignOut = async () => {
    await signOut();
    navigation.closeDrawer();
  };

  return (
    <SafeAreaView style={styles.drawerContainer} edges={['top', 'bottom']}>
      <DrawerContentScrollView
        contentContainerStyle={styles.drawerContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Header Section */}
        <View style={styles.drawerHeader}>
          <View style={styles.userSection}>
            <View style={styles.userAvatar}>
              <Text style={styles.userAvatarText}>
                {user?.email ? user.email.charAt(0).toUpperCase() : 'U'}
              </Text>
            </View>
            <View style={styles.userInfo}>
              <Text style={styles.userName}>Welcome back!</Text>
              <Text style={styles.userEmail} numberOfLines={1}>
                {user?.email || 'User'}
              </Text>
            </View>
          </View>
        </View>

        {/* Menu Items */}
        <View style={styles.menuSection}>
          <Text style={styles.sectionTitle}>Menu</Text>
          {menuItems.map((item, index) => (
            <TouchableOpacity
              key={index}
              style={styles.menuItem}
              onPress={item.onPress}
              accessibilityLabel={item.name}
              accessibilityRole="button"
            >
              <Ionicons 
                name={item.icon as any} 
                size={24} 
                color={designTokens.colors.text.secondary} 
              />
              <Text style={styles.menuItemText}>{item.name}</Text>
            </TouchableOpacity>
          ))}
        </View>

        {/* App Info Section */}
        <View style={styles.infoSection}>
          <Text style={styles.sectionTitle}>About</Text>
          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              // TODO: Navigate to help/support
              console.log('Help & Support - Coming Soon');
            }}
          >
            <Ionicons name="help-circle-outline" size={24} color={designTokens.colors.text.secondary} />
            <Text style={styles.menuItemText}>Help & Support</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              // TODO: Navigate to privacy policy
              console.log('Privacy Policy - Coming Soon');
            }}
          >
            <Ionicons name="shield-outline" size={24} color={designTokens.colors.text.secondary} />
            <Text style={styles.menuItemText}>Privacy Policy</Text>
          </TouchableOpacity>
        </View>

        {/* Sign Out Button */}
        <View style={styles.signOutSection}>
          <TouchableOpacity
            style={styles.signOutButton}
            onPress={handleSignOut}
            accessibilityLabel="Sign out"
            accessibilityRole="button"
          >
            <Ionicons name="log-out-outline" size={24} color={designTokens.colors.error} />
            <Text style={styles.signOutText}>Sign Out</Text>
          </TouchableOpacity>
        </View>
      </DrawerContentScrollView>
    </SafeAreaView>
  );
}

export default function DrawerNavigator() {
  return (
    <Drawer.Navigator
      drawerContent={(props) => <CustomDrawerContent {...props} />}
      screenOptions={{
        headerShown: false, // We'll use custom headers
        drawerType: 'front',
        drawerStyle: {
          backgroundColor: designTokens.colors.background,
          width: 280,
        },
        overlayColor: 'rgba(0, 0, 0, 0.5)',
        sceneStyle: {
          backgroundColor: designTokens.colors.background,
        },
      }}
    >
      <Drawer.Screen 
        name="Chat" 
        component={ChatScreen}
        options={{
          drawerLabel: 'Chat with Toddy',
          drawerIcon: ({ color, size }) => (
            <Ionicons name="chatbubble-outline" size={size} color={color} />
          ),
        }}
      />
      <Drawer.Screen 
        name="Camera" 
        component={CameraScreen}
        options={{
          drawerLabel: 'Take Photo',
          drawerIcon: ({ color, size }) => (
            <Ionicons name="camera-outline" size={size} color={color} />
          ),
        }}
      />
      <Drawer.Screen 
        name="Results" 
        component={ResultsScreen}
        options={{
          drawerLabel: 'View Results',
          drawerIcon: ({ color, size }) => (
            <Ionicons name="document-text-outline" size={size} color={color} />
          ),
        }}
      />
    </Drawer.Navigator>
  );
}

const styles = StyleSheet.create({
  drawerContainer: {
    flex: 1,
    backgroundColor: designTokens.colors.background,
  },
  drawerContent: {
    flexGrow: 1,
  },
  drawerHeader: {
    paddingHorizontal: designTokens.spacing.lg,
    paddingVertical: designTokens.spacing.xl,
    borderBottomWidth: 1,
    borderBottomColor: designTokens.colors.border,
    backgroundColor: designTokens.colors.surface,
  },
  userSection: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  userAvatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: designTokens.colors.primary[500],
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: designTokens.spacing.md,
  },
  userAvatarText: {
    fontSize: designTokens.typography.fontSize.lg,
    fontWeight: designTokens.typography.fontWeight.bold,
    color: designTokens.colors.text.inverse,
  },
  userInfo: {
    flex: 1,
  },
  userName: {
    fontSize: designTokens.typography.fontSize.base,
    fontWeight: designTokens.typography.fontWeight.semibold,
    color: designTokens.colors.text.primary,
    marginBottom: 2,
  },
  userEmail: {
    fontSize: designTokens.typography.fontSize.sm,
    color: designTokens.colors.text.secondary,
  },
  menuSection: {
    paddingTop: designTokens.spacing.lg,
    paddingHorizontal: designTokens.spacing.lg,
  },
  infoSection: {
    paddingTop: designTokens.spacing.lg,
    paddingHorizontal: designTokens.spacing.lg,
    borderTopWidth: 1,
    borderTopColor: designTokens.colors.border,
    marginTop: designTokens.spacing.lg,
  },
  sectionTitle: {
    fontSize: designTokens.typography.fontSize.sm,
    fontWeight: designTokens.typography.fontWeight.semibold,
    color: designTokens.colors.text.tertiary,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
    marginBottom: designTokens.spacing.md,
    paddingHorizontal: designTokens.spacing.xs,
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: designTokens.spacing.md,
    paddingHorizontal: designTokens.spacing.xs,
    borderRadius: designTokens.borderRadius.md,
    marginBottom: designTokens.spacing.xs,
  },
  menuItemText: {
    fontSize: designTokens.typography.fontSize.base,
    color: designTokens.colors.text.primary,
    marginLeft: designTokens.spacing.md,
    fontWeight: designTokens.typography.fontWeight.medium,
  },
  signOutSection: {
    marginTop: 'auto',
    paddingHorizontal: designTokens.spacing.lg,
    paddingBottom: designTokens.spacing.lg,
    borderTopWidth: 1,
    borderTopColor: designTokens.colors.border,
    paddingTop: designTokens.spacing.lg,
  },
  signOutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: designTokens.spacing.md,
    paddingHorizontal: designTokens.spacing.xs,
  },
  signOutText: {
    fontSize: designTokens.typography.fontSize.base,
    color: designTokens.colors.error,
    marginLeft: designTokens.spacing.md,
    fontWeight: designTokens.typography.fontWeight.medium,
  },
});